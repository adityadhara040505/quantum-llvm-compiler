Metadata-Version: 2.4
Name: quantum-llvm-compiler
Version: 1.0.0
Summary: A hybrid quantum-classical compiler supporting QASM and NASM to LLVM IR
Home-page: https://github.com/adityadhara040505/quantum-llvm-compiler
Author: Quantum-LLVM Compiler Team
Author-email: dev@quantum-llvm-compiler.org
Project-URL: Bug Tracker, https://github.com/adityadhara040505/quantum-llvm-compiler/issues
Project-URL: Documentation, https://github.com/adityadhara040505/quantum-llvm-compiler/docs
Project-URL: Source Code, https://github.com/adityadhara040505/quantum-llvm-compiler
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Science/Research
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: POSIX :: Linux
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Assembly
Classifier: Topic :: Scientific/Engineering :: Physics
Classifier: Topic :: Software Development :: Compilers
Classifier: Topic :: System :: Hardware
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Requires-Dist: llvmlite==0.43.0
Requires-Dist: qiskit==1.1.2
Requires-Dist: antlr4-python3-runtime==4.13
Requires-Dist: numpy
Requires-Dist: networkx
Requires-Dist: sympy
Requires-Dist: pytest
Provides-Extra: dev
Requires-Dist: pytest>=6.0; extra == "dev"
Requires-Dist: pytest-cov>=2.0; extra == "dev"
Requires-Dist: black>=21.0; extra == "dev"
Requires-Dist: flake8>=3.8; extra == "dev"
Requires-Dist: mypy>=0.910; extra == "dev"
Provides-Extra: docs
Requires-Dist: sphinx>=4.0; extra == "docs"
Requires-Dist: sphinx-rtd-theme>=1.0; extra == "docs"
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: project-url
Dynamic: provides-extra
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary

# Quantum-LLVM Compiler v1.0.0

![License](https://img.shields.io/badge/license-MIT-green.svg)
![Python](https://img.shields.io/badge/python-3.8+-blue.svg)
![Platform](https://img.shields.io/badge/platform-Linux-lightgrey.svg)

A sophisticated hybrid compiler that bridges quantum computing and classical assembly programming by compiling both QASM (Quantum Assembly) and NASM (x86_64 Assembly) to LLVM Intermediate Representation (IR).

## 🚀 Quick Start

```bash
# Setup the project
make setup

# Run interactive demo
make demo

# Build all examples
make examples

# Compile quantum circuit
./main.py quantum examples/quantum/grover.qasm

# Compile assembly program  
./main.py classical examples/assembly/working_demo.asm
```

## 📁 Project Structure

```
quantum-llvm-compiler/
├── main.py                 # 🚀 Main entry point
├── Makefile               # 🔨 Build automation
├── requirements.txt       # 📦 Dependencies
├── setup.py              # 📦 Package setup
│
├── src/                   # 📚 Source code
│   ├── frontend/          # 🔍 Parsers & lexers
│   │   ├── parser.py      #   • QASM parser
│   │   ├── lexer.py       #   • Tokenization
│   │   ├── ast_nodes.py   #   • AST definitions
│   │   └── nasm_parser.py #   • NASM assembly parser
│   ├── ir/                # 🔄 Intermediate representation  
│   │   ├── qir_builder.py #   • Quantum IR builder
│   │   ├── passes.py      #   • Optimization passes
│   │   └── verifier.py    #   • IR verification
│   ├── backend/           # ⚙️  Code generation
│   │   ├── emitter.py     #   • Code emission
│   │   ├── transpiler.py  #   • Target translation
│   │   ├── scheduler.py   #   • Instruction scheduling
│   │   └── llvm_integration.py # • LLVM IR generation
│   ├── execution/         # 🏃 Runtime & simulation
│   │   ├── simulator.py   #   • Quantum simulation
│   │   ├── hybrid_executor.py # • Hybrid execution
│   │   └── profiler.py    #   • Performance profiling
│   └── utils/             # 🛠️  Utilities
│       ├── config.py      #   • Configuration
│       ├── logger.py      #   • Logging system
│       └── helpers.py     #   • Helper functions
│
├── examples/              # 📋 Example programs
│   ├── quantum/           # 🔬 QASM quantum circuits
│   │   ├── grover.qasm    #   • Grover's algorithm
│   │   ├── teleport.qasm  #   • Quantum teleportation
│   │   └── *.qasm         #   • Other quantum examples
│   ├── assembly/          # ⚙️  NASM assembly programs
│   │   ├── working_demo.asm #  • Array processing demo
│   │   ├── basics.asm     #   • Basic operations
│   │   └── *.asm          #   • Other assembly examples
│   └── classical/         # 💻 Classical examples
│       ├── traditional_example.c # • C examples
│       └── traditional_example.s # • Assembly examples
│
├── scripts/               # 🎯 Utility scripts
│   ├── run_quantum_compiler.py  # • Quantum compilation
│   ├── classical_compiler_final.py # • Classical compilation
│   ├── demo.sh           #   • Demo automation
│   └── *.py              #   • Other utilities
│
├── tests/                 # 🧪 Test suite
│   ├── test_frontend.py   #   • Frontend tests
│   ├── test_ir.py         #   • IR tests
│   ├── test_backend.py    #   • Backend tests
│   └── test_execution.py  #   • Execution tests
│
├── docs/                  # 📖 Documentation
│   └── architecture.md   #   • Architecture guide
│
├── build/                 # 🔨 Build artifacts
├── bin/                   # 📦 Compiled binaries  
└── output/                # 📤 Generated outputs
```

## ✨ Features

### 🔬 Quantum Circuit Compilation
- **QASM Parsing**: Complete OpenQASM 2.0 support
- **Quantum IR Generation**: QIR-compatible intermediate representation
- **Circuit Optimization**: Gate fusion, redundancy elimination
- **Simulation Support**: Integration with Qiskit simulator

### ⚙️ Classical Assembly Compilation  
- **NASM x86_64 Support**: Full instruction set coverage
- **LLVM IR Generation**: Direct assembly-to-IR translation
- **Register Allocation**: Virtual register management
- **Optimization Passes**: Dead code elimination, constant folding

### 🔗 Hybrid Execution
- **Unified Runtime**: Seamless quantum-classical integration
- **Memory Management**: Shared state between quantum and classical
- **Profiling Tools**: Performance analysis and debugging
- **Error Handling**: Comprehensive error reporting

### 🛠️ Development Tools
- **Interactive CLI**: User-friendly command-line interface
- **Build System**: Professional Makefile with colored output
- **Testing Framework**: Comprehensive test coverage
- **Documentation**: Detailed API and usage documentation

## 🏗️ Installation

### Prerequisites
```bash
# Ubuntu/Debian
sudo apt update
sudo apt install python3 python3-pip python3-venv nasm build-essential llvm-dev

# Fedora/RHEL
sudo dnf install python3 python3-pip nasm gcc llvm-devel
```

### Setup
```bash
# Clone the repository
git clone <repository-url>
cd quantum-llvm-compiler

# Automated setup
make setup

# Manual setup (alternative)
python3 -m venv .venv
source .venv/bin/activate
pip install -r requirements.txt
```

## 🎮 Usage

### Command Line Interface
```bash
# Show help
./main.py --help

# List available examples
./main.py --list-examples

# Interactive demonstration
./main.py --demo

# Compile quantum circuit
./main.py quantum examples/quantum/grover.qasm

# Compile assembly with verbose output
./main.py classical examples/assembly/working_demo.asm --verbose

# Specify output file
./main.py quantum examples/quantum/teleport.qasm -o my_teleport
```

### Using Make
```bash
# Show all available targets
make help

# Build everything
make all

# Run tests
make test

# Clean build artifacts
make clean

# Check project status
make status

# Run specific examples
make run-quantum
make run-classical
```

### Python API
```python
from src.frontend.parser import QASMParser
from src.ir.qir_builder import QIRBuilder
from src.backend.emitter import LLVMEmitter

# Parse QASM file
parser = QASMParser()
ast = parser.parse_file("examples/quantum/grover.qasm")

# Generate quantum IR
qir_builder = QIRBuilder()
qir = qir_builder.build(ast)

# Emit LLVM IR
emitter = LLVMEmitter()
llvm_ir = emitter.emit(qir)
```

## 📚 Examples

### Quantum Examples
- **`grover.qasm`**: Grover's search algorithm implementation
- **`teleport.qasm`**: Quantum teleportation protocol
- **`test_redundant.qasm`**: Circuit optimization demonstration

### Assembly Examples  
- **`working_demo.asm`**: Array processing with number printing
- **`basics.asm`**: Fundamental assembly operations
- **`minimal_test.asm`**: Simple hello-world equivalent

### Running Examples
```bash
# Quantum circuit compilation
./main.py quantum examples/quantum/grover.qasm

# Assembly compilation
./main.py classical examples/assembly/working_demo.asm

# Run compiled assembly
./bin/working_demo
```

## 🧪 Testing

```bash
# Run all tests
make test

# Run specific test module
python -m pytest tests/test_frontend.py -v

# Run with coverage
python -m pytest --cov=src tests/
```

## 📖 Documentation

- **[Architecture Guide](docs/architecture.md)**: Detailed system architecture
- **[Usage Guide](USAGE.md)**: Comprehensive usage examples  
- **[Demo Guide](DEMO_GUIDE.md)**: Step-by-step demonstrations
- **[Effectiveness Analysis](EFFECTIVENESS_ANALYSIS.md)**: Performance analysis

## 🔧 Development

### Adding New Features
1. **Frontend**: Add parsers in `src/frontend/`
2. **IR**: Extend IR builders in `src/ir/`
3. **Backend**: Add emitters in `src/backend/`
4. **Tests**: Add corresponding tests in `tests/`

### Code Structure
- **Modular Design**: Clear separation of concerns
- **Type Hints**: Full Python type annotation
- **Documentation**: Comprehensive docstrings
- **Error Handling**: Robust error management

## 🤝 Contributing

1. Fork the repository
2. Create feature branch (`git checkout -b feature/amazing-feature`)
3. Commit changes (`git commit -m 'Add amazing feature'`)
4. Push to branch (`git push origin feature/amazing-feature`)
5. Open Pull Request

## 📄 License

This project is licensed under the MIT License - see the LICENSE file for details.

## 🏆 Acknowledgments

- **LLVM Project**: For the powerful compilation infrastructure
- **Qiskit Team**: For quantum computing framework
- **NASM Project**: For the assembly language support

## 📊 Project Status

- ✅ **Quantum Compilation**: Fully implemented
- ✅ **Classical Compilation**: Fully implemented  
- ✅ **Hybrid Execution**: Basic implementation
- 🔄 **Advanced Optimizations**: In progress
- 📋 **Extended Examples**: Planned

---

<div align="center">

**🌟 Star this repository if you find it useful! 🌟**

[🐛 Report Bug](https://github.com/user/quantum-llvm-compiler/issues) • [✨ Request Feature](https://github.com/user/quantum-llvm-compiler/issues) • [📖 Documentation](docs/)

</div>
